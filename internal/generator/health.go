package generator

import (
	"fmt"
	"path/filepath"
	"syncgen/internal/config"
)

// generateHealthCheckScript creates a health check script for monitoring primary PostgreSQL status
func (g *Generator) generateHealthCheckScript(replica config.Replica, replicaDir string) error {
	script := fmt.Sprintf(`#!/bin/bash
# Health check script for PostgreSQL primary at %s
# Monitoring from replica %s
# Generated by ha-syncgen

set -e

LOG_FILE="/var/log/ha-syncgen/health-check-%s.log"
PRIMARY_HOST="%s"
PRIMARY_PORT="%d"
REPLICA_HOST="%s"
REPLICATION_USER="%s"
DATA_DIR="%s"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Function to log messages with timestamp
log_message() {
    echo "$(date): $1" >> "$LOG_FILE"
}

# Function to check if primary is reachable and PostgreSQL is running
check_primary_status() {
    # Test network connectivity
    if ! nc -z "$PRIMARY_HOST" "$PRIMARY_PORT" 2>/dev/null; then
        log_message "CRITICAL: Cannot connect to primary PostgreSQL at $PRIMARY_HOST:$PRIMARY_PORT"
        return 1
    fi
    
    # Test PostgreSQL service status using psql
    if ! timeout 10 psql -h "$PRIMARY_HOST" -p "$PRIMARY_PORT" -U "$REPLICATION_USER" -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
        log_message "CRITICAL: PostgreSQL on primary $PRIMARY_HOST:$PRIMARY_PORT is not responding"
        return 1
    fi
    
    # Check if we're receiving WAL streams (this replica should be connected)
    if ! psql -h localhost -p %d -d postgres -c "SELECT application_name, state, sync_state FROM pg_stat_replication WHERE client_addr = inet '%s';" 2>/dev/null | grep -q "streaming"; then
        log_message "WARNING: This replica may not be properly connected to primary for streaming replication"
    fi
    
    log_message "OK: Primary PostgreSQL at $PRIMARY_HOST:$PRIMARY_PORT is healthy"
    return 0
}

# Function to promote this replica to primary (if auto-promotion is enabled)
promote_replica() {
    if [ "%t" = "true" ]; then
        log_message "INITIATING: Auto-promotion of replica $REPLICA_HOST to primary"
        
        # Stop PostgreSQL gracefully
        systemctl stop postgresql
        
        # Create recovery signal to promote
        sudo -u postgres touch "$DATA_DIR/promote.signal"
        
        # Start PostgreSQL as new primary
        systemctl start postgresql
        
        # Update replication configuration to accept new replicas
        sudo -u postgres psql -d postgres -c "ALTER SYSTEM SET archive_mode = on;"
        sudo -u postgres psql -d postgres -c "SELECT pg_reload_conf();"
        
        log_message "SUCCESS: Replica $REPLICA_HOST promoted to primary"
        
        # Optional: Send notification (webhook, email, etc.)
        # curl -X POST "http://monitoring.example.com/webhook" -d "PostgreSQL failover: $REPLICA_HOST promoted to primary"
        
        exit 0
    else
        log_message "MANUAL: Primary $PRIMARY_HOST is down. Manual intervention required for promotion."
        exit 2
    fi
}

# Main health check logic
main() {
    if check_primary_status; then
        exit 0  # Primary is healthy
    else
        log_message "Primary health check failed. Waiting 30 seconds before potential promotion..."
        sleep 30
        
        # Double-check primary status before promoting
        if ! check_primary_status; then
            promote_replica
        fi
    fi
}

# Run the main function
main "$@"
`,
		g.config.Primary.Host, replica.Host, replica.Host,
		g.config.Primary.Host, g.config.Primary.Port, replica.Host,
		g.config.Primary.ReplicationUser, g.config.Primary.DataDirectory,
		replica.Port, replica.Host, g.config.Options.PromoteOnFailure)

	return g.writeFile(filepath.Join(replicaDir, "health_check.sh"), script)
}
