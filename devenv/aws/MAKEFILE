# Simple Makefile for the AWS dev environment
# Targets:
#  - init-env : setup terraform configuration (terraform.tfvars)
#  - aws      : initialize, plan and apply terraform in ./terraform  
#  - scripts  : generate ALL deployment files (config.yaml + docker + sql + .sh)
#  - deploy   : deploy Docker containers to AWS servers
#  - syncgen  : generate HA sync scripts using main syncgen CLI
#  - clean    : destroy infra and remove local terraform state/backups

SHELL := /bin/zsh
TF_DIR := terraform

.PHONY: help init-env aws scripts deploy syncgen clean full-deploy full-stack dev-cycle init plan apply destroy

help: ## Show this help
	@printf "\nAWS Dev Environment Makefile\n"
	@printf "----------------------------------------\n"
	@printf "Available targets:\n"
	@printf "  %-26s %s\n" "init-env" "Setup terraform configuration (terraform.tfvars)"
	@printf "  %-26s %s\n" "aws" "Provision AWS infrastructure (init + plan + apply)"
	@printf "  %-26s %s\n" "scripts" "Generate all deployment files from terraform state"
	@printf "  %-26s %s\n" "syncgen" "Build and run syncgen CLI to generate HA scripts"
	@printf "  %-26s %s\n" "deploy" "Deploy PostgreSQL containers and scripts to AWS servers"
	@printf "  %-26s %s\n" "syncgen-transfer" "Generate transfer/run scripts for HA setup"
	@printf "  %-26s %s\n" "syncgen-transfer-execute" "Transfer and execute all HA scripts on VMs"
	@printf "  %-26s %s\n" "clean" "Destroy infra and remove all generated files/state"
	@printf "\nConvenience targets:\n"
	@printf "  %-26s %s\n" "full-deploy" "Full flow: init-env ‚Üí aws ‚Üí scripts ‚Üí deploy"
	@printf "  %-26s %s\n" "full-stack" "Full deploy + syncgen + transfer + execute (end-to-end HA)"
	@printf "  %-26s %s\n" "dev-cycle" "Quick redeploy: scripts ‚Üí deploy (assumes AWS exists)"
	@printf "\nLegacy targets:\n"
	@printf "  %-26s %s\n" "config" "Legacy: now same as scripts"
	@printf "  %-26s %s\n" "setup" "Legacy: now same as full-stack"

## Setup terraform configuration
init-env: ## Setup terraform configuration from example
	@echo "-> Setting up terraform configuration"
	@if [ ! -f "$(TF_DIR)/terraform.tfvars" ]; then \
		cp $(TF_DIR)/terraform.tfvars.example $(TF_DIR)/terraform.tfvars; \
		echo "‚úÖ Created terraform.tfvars from example. Please edit it with your settings."; \
	else \
		echo "‚úÖ terraform.tfvars already exists"; \
	fi

## Deploy AWS infrastructure: init ‚Üí plan ‚Üí apply
aws: init plan apply ## Deploy AWS infrastructure

## Generate ALL deployment files from terraform state (single pass - no config.yaml roundtrip)
scripts: ## Generate config.yaml + docker + sql + deployment scripts from terraform state
	@echo "-> Generating all deployment files from terraform state"
	@if [ ! -f "$(TF_DIR)/terraform.tfstate" ]; then \
		echo "‚ùå terraform.tfstate not found. Run 'make aws' first"; \
		exit 1; \
	fi
	@go run main.go generate-all-from-terraform $(TF_DIR)/terraform.tfstate
	@echo "‚úÖ All deployment files generated successfully"

# Generate and run syncgen transfer scripts for per-VM file transfer
syncgen-transfer: ## Generate and run syncgen transfer scripts for all VMs
	@echo "-> Generating syncgen transfer and run scripts from generated/ folder"
	@if [ ! -f "./generated/config.yaml" ]; then \
		echo "‚ùå generated/config.yaml not found. Run 'make scripts' and 'make syncgen' first."; \
		exit 1; \
	fi
	@go run main.go generate-syncgen-transfer-scripts
	@chmod +x ./generated/transfer-ha-scripts.sh ./generated/run-ha-scripts.sh
	@echo "‚úÖ Syncgen transfer and run scripts generated."

syncgen-transfer-execute: syncgen-transfer ## Transfer and execute all syncgen files on VMs
	@echo "-> Transferring all syncgen files to VMs"
	@./generated/transfer-ha-scripts.sh
	@echo "-> Running all syncgen scripts on VMs"
	@./generated/run-ha-scripts.sh
	@echo "‚úÖ All syncgen scripts transferred and executed on VMs."

## Deploy Docker containers to AWS servers
deploy: ## Deploy PostgreSQL containers to AWS servers via SSH
	@echo "-> Deploying PostgreSQL containers to AWS servers"
	@if [ ! -f "generated/deploy-to-servers.sh" ]; then \
		echo "‚ùå Deployment scripts not found. Run 'make scripts' first"; \
		exit 1; \
	fi
	@chmod +x generated/deploy-to-servers.sh
	@./generated/deploy-to-servers.sh
	@echo "‚úÖ Deployment completed successfully"

## Generate HA sync scripts using main syncgen CLI
syncgen: ## Generate HA sync scripts (requires generated/config.yaml)
	@echo "-> Generating HA sync scripts using main syncgen CLI"
	@if [ ! -f "generated/config.yaml" ]; then \
		echo "‚ùå config.yaml not found. Run 'make scripts' first"; \
		exit 1; \
	fi
	@echo "-> Building syncgen CLI"
	@cd ../../ && go build
	@echo "-> Validating configuration"
	@cd ../../ && ./syncgen validate ./devenv/aws/generated/config.yaml
	@echo "-> Generating HA scripts"
	@cd ../../ && ./syncgen build ./devenv/aws/generated/config.yaml
	@echo "‚úÖ HA sync scripts generated successfully"

## Convenience targets
full-deploy: init-env aws scripts deploy ## Complete deployment from scratch
	@echo "üéâ Complete PostgreSQL HA deployment successful!"
	@echo "Your cluster is running with the following servers:"
	@grep -E "Primary:|Replica" generated/DEPLOYMENT_README.md || echo "Check generated/DEPLOYMENT_README.md for connection details"

full-stack: full-deploy syncgen syncgen-transfer syncgen-transfer-execute ## Everything including HA sync scripts and setting up the replicas
	@echo "üéâ Full HA PostgreSQL stack deployed successfully!"

dev-cycle: scripts deploy ## Quick redeploy (assumes AWS infrastructure exists)
	@echo "üîÑ Development cycle complete - configs regenerated and deployed!"

## Terraform operations
init: ## terraform init
	@echo "-> Initializing Terraform in $(TF_DIR)"
	@cd $(TF_DIR) && terraform init

plan: ## terraform plan (expects terraform.tfvars present)
	@echo "-> Running terraform plan"
	@cd $(TF_DIR) && terraform plan -out -var-file=terraform.tfvars

apply: ## terraform apply (non-interactive)
	@echo "-> Applying terraform (this may create cloud resources)"
	@cd $(TF_DIR) && terraform apply -auto-approve -var-file=terraform.tfvars

destroy: ## terraform destroy (non-interactive)
	@echo "-> Destroying terraform-managed infrastructure"
	@cd $(TF_DIR) && terraform destroy -auto-approve -var-file=terraform.tfvars || true

## Clean: destructive - destroy infra and remove local state/backups
clean: ## Destroy infra and remove local terraform state/backups
	@echo "-> CLEAN: this will destroy infra and remove local terraform state/backups"
	@read -q "REPLY?Are you sure you want to continue? (y/N) " && echo; \
	if [ "$$REPLY" != "y" ]; then echo "Aborting clean."; exit 1; fi
	@echo "-> Destroying infrastructure"
	@$(MAKE) destroy || true
	@echo "-> Cleaning local terraform state"
	@echo "-> $(TF_DIR)"
	@if [ -d "$(TF_DIR)" ]; then \
		rm -rf "$(TF_DIR)/.terraf" "$(TF_DIR)/.terraform.lock.hcl" "$(TF_DIR)/terraform.tfstate" "$(TF_DIR)/terraform.tfstate.backup" "$(TF_DIR)"/*.backup || true; \
		echo "Removed local terraform state and related files from $(TF_DIR)"; \
	fi
	@echo "-> Cleaning generated files"
	@rm -rf generated/ || true
	@rm -rf ../../generated || true
	@echo "‚úÖ Cleaned generated files"
	@read -q "REPLY?Do you want to delete your terraform variables? (y/N)" && echo; \
	if [ "$$REPLY" != "y" ]; then echo "‚úÖ Cleaned Terraform infrastructure"; exit 1; fi
	@echo "-> Cleaning terraform variables"
	@rm -f "$(TF_DIR)/terraform.tfvars"
	@echo "‚úÖ Deleted terraform variables"
	@echo "‚úÖ Full clean complete"

## Legacy targets (backward compatibility)
config: scripts ## Legacy: generate config (now generates all scripts)
	@echo "‚ö†Ô∏è  'make config' is deprecated. Use 'make scripts' instead."

setup: full-stack ## Legacy: complete setup (now same as full-stack)
	@echo "‚ö†Ô∏è  'make setup' is deprecated. Use 'make full-stack' instead."